{
  "timestamp": "2025-06-21T11:08:25.589Z",
  "summary": {
    "totalTests": 8,
    "totalPassed": 4,
    "totalFailed": 4,
    "successRate": 50
  },
  "categories": {
    "dataAggregation": {
      "passed": 0,
      "failed": 1,
      "tests": [
        {
          "message": "Data aggregation failed: \nInvalid `prisma.user.create()` invocation in\n/Users/expr/Documents/PlatformCodebase/BurnBlack-React/backend/test/testITRGeneration.js:337:40\n\n  334 \n  335 async createTestUser() {\n  336   // Create comprehensive test user data\n→ 337   const testUser = await prisma.user.create(\nerror: Environment variable not found: SUPABASE_DATABASE_URL.\n  -->  schema.prisma:10\n   | \n 9 |   provider = \"postgresql\"\n10 |   url      = env(\"SUPABASE_DATABASE_URL\")\n   | \n\nValidation Error Count: 1",
          "passed": false
        }
      ]
    },
    "taxCalculations": {
      "passed": 4,
      "failed": 0,
      "tests": [
        {
          "message": "Old regime tax for ₹8L: ₹75400",
          "passed": true
        },
        {
          "message": "New regime tax for ₹8L: ₹31200",
          "passed": true
        },
        {
          "message": "Rebate 87A applied for low income: ₹7500",
          "passed": true
        },
        {
          "message": "High income tax calculated correctly: ₹429000",
          "passed": true
        }
      ]
    },
    "jsonGeneration": {
      "passed": 0,
      "failed": 1,
      "tests": [
        {
          "message": "ITR JSON generation failed: \nInvalid `prisma.user.create()` invocation in\n/Users/expr/Documents/PlatformCodebase/BurnBlack-React/backend/test/testITRGeneration.js:337:40\n\n  334 \n  335 async createTestUser() {\n  336   // Create comprehensive test user data\n→ 337   const testUser = await prisma.user.create(\nerror: Environment variable not found: SUPABASE_DATABASE_URL.\n  -->  schema.prisma:10\n   | \n 9 |   provider = \"postgresql\"\n10 |   url      = env(\"SUPABASE_DATABASE_URL\")\n   | \n\nValidation Error Count: 1",
          "passed": false
        }
      ]
    },
    "schemaCompliance": {
      "passed": 0,
      "failed": 1,
      "tests": [
        {
          "message": "Schema compliance failed: \nInvalid `prisma.user.create()` invocation in\n/Users/expr/Documents/PlatformCodebase/BurnBlack-React/backend/test/testITRGeneration.js:337:40\n\n  334 \n  335 async createTestUser() {\n  336   // Create comprehensive test user data\n→ 337   const testUser = await prisma.user.create(\nerror: Environment variable not found: SUPABASE_DATABASE_URL.\n  -->  schema.prisma:10\n   | \n 9 |   provider = \"postgresql\"\n10 |   url      = env(\"SUPABASE_DATABASE_URL\")\n   | \n\nValidation Error Count: 1",
          "passed": false
        }
      ]
    },
    "endToEnd": {
      "passed": 0,
      "failed": 1,
      "tests": [
        {
          "message": "End-to-end workflow failed: \nInvalid `prisma.user.create()` invocation in\n/Users/expr/Documents/PlatformCodebase/BurnBlack-React/backend/test/testITRGeneration.js:337:40\n\n  334 \n  335 async createTestUser() {\n  336   // Create comprehensive test user data\n→ 337   const testUser = await prisma.user.create(\nerror: Environment variable not found: SUPABASE_DATABASE_URL.\n  -->  schema.prisma:10\n   | \n 9 |   provider = \"postgresql\"\n10 |   url      = env(\"SUPABASE_DATABASE_URL\")\n   | \n\nValidation Error Count: 1",
          "passed": false
        }
      ]
    }
  },
  "recommendations": [
    "Review failed tests and fix underlying issues",
    "ITR JSON schema compliance needs attention"
  ]
}