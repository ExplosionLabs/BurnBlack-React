// models/User.js
const mongoose = require("mongoose");

const userSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    phone: { type: String },
    email: { type: String, required: true, unique: true },
    password: { type: String },
    role: { type: String, enum: ["admin", "user"], default: "user" },
  },
  { timestamps: true }
);

module.exports = mongoose.model("User", userSchema);

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const rentalSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  propertyIndex: {
    type: String,
  },
  propertyType: String,
  netTaxableIncome: Number,
  houseAddress: {
    flatNo: String,
    premiseName: String,
    road: String,
    area: String,
    pincode: String,
    country: String,
    state: String,
    city: String,
  },
  ownerDetails: {
    ownerName: String,
    ownerPan: String,
    ownerShare: Number,
    hasMultipleOwners: Boolean,
    coOwners: [
      {
        coOwnerName: String,
        coOwnerPan: String,
        coOwnerShare: Number,
      },
    ],
  },
  taxSavings: {
    constructionYear: String,
    interestDuringConstruction: Number,
    interestAfterCompletion: Number,
    totalDeduction: Number,
  },
  rentalIncomeDetails: {
    annualRent: String,
    taxPaid: Number,
    standardDeduction: Number,
    netIncome: Number,
  },
  tentatDetails: [
    {
      name: String,
      panOrTan: String,
      aadhaar: String,
    },
  ],
});

const RentalProperty = mongoose.model("RentalProperty", rentalSchema);
module.exports = RentalProperty;

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const propertySchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  propertyIndex: {
    type: String,
  },
  propertyType: String,
  netTaxableIncome: Number,
  houseAddress: {
    flatNo: String,
    premiseName: String,
    road: String,
    area: String,
    pincode: String,
    country: String,
    state: String,
    city: String,
  },
  ownerDetails: {
    ownerName: String,
    ownerPan: String,
    ownerShare: Number,
    hasMultipleOwners: Boolean,
    coOwners: [
      {
        coOwnerName: String,
        coOwnerPan: String,
        coOwnerShare: Number,
      },
    ],
  },
  taxSavings: {
    constructionYear: String,
    interestDuringConstruction: Number,
    interestAfterCompletion: Number,
    totalDeduction: Number,
  },
  rentalIncomeDetails: {
    annualRent: String,
    taxPaid: Number,
    standardDeduction: Number,
    netIncome: Number,
  },
});

const Property = mongoose.model("Property", propertySchema);
module.exports = Property;
const mongoose = require("mongoose");

const personalDetailSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    firstName: { type: String },
    middleName: { type: String },
    lastName: { type: String },
    dob: { type: Date },
    gender: {
      type: String,
    },
    maritalStatus: {
      type: String,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("PersonalDetail", personalDetailSchema);
const mongoose = require("mongoose");

const InterestIncomeSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    type: {
      type: String,
      enum: [
        "Savings Bank",
        "Fixed Deposits",
        "P2P Investments",
        "Bond Investments",
        "Provident Fund",
        "Income Tax Refund",
        "Other Interest Income",
      ],
      required: true,
    },
    data: [
      {
        fieldType: { type: String },
        name: { type: String }, // For "Savings Bank", "P2P Investments", "Bond Investments"
        description: { type: String }, // For "Fixed Deposits"
        amount: { type: Number, required: true }, // Shared across all
      },
    ],
  },
  { timestamps: true }
);

const IncomeInterest = mongoose.model("IncomeInterest", InterestIncomeSchema);
module.exports = IncomeInterest;
const mongoose = require("mongoose");

const gstDataSchema = new mongoose.Schema(
  {
    contact_details: {
      principal: {
        address: { type: String, required: true },
        email: { type: String, required: true },
        mobile: { type: String, required: true },
        nature_of_business: { type: String, required: true },
      },
      additional: { type: [String], default: [] },
    },
    promoters: { type: [String], default: [] },
    annual_turnover: { type: String, required: true },
    annual_turnover_fy: { type: String, required: true },
    percentage_in_cash_fy: { type: String, default: "" },
    percentage_in_cash: { type: String, default: "NA" },
    aadhaar_validation: { type: String, required: true },
    aadhaar_validation_date: { type: Date },
    address_details: { type: Object, default: {} },
    liability_percentage_details: { type: Object, default: {} },
    less_info: { type: Boolean, default: false },
    einvoice_status: { type: Boolean, required: true },
    client_id: { type: String, required: true },
    gstin: { type: String, required: true },
    pan_number: { type: String, required: true },
    business_name: { type: String, required: true },
    legal_name: { type: String, required: true },
    center_jurisdiction: { type: String, required: true },
    state_jurisdiction: { type: String, required: true },
    date_of_registration: { type: Date, required: true },
    constitution_of_business: { type: String, required: true },
    taxpayer_type: { type: String, required: true },
    gstin_status: { type: String, required: true },
    date_of_cancellation: { type: Date, default: "1800-01-01" },
    field_visit_conducted: { type: String, default: "No" },
    nature_bus_activities: { type: [String], default: [] },
    nature_of_core_business_activity_code: { type: String, required: true },
    nature_of_core_business_activity_description: {
      type: String,
      required: true,
    },
    filing_status: { type: [String], default: [] },
    address: { type: String, default: null },
    hsn_info: { type: Object, default: {} },
    filing_frequency: { type: [String], default: [] },
  },
  { timestamps: true }
);


module.exports = mongoose.model("GSTData", gstDataSchema);

const mongoose = require("mongoose");

const SalaryBreakupSchema = new mongoose.Schema({
  type: {
    type: String,
  },
  amount: {
    type: Number,
  },
});

const Form16DataSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  employerName: String,
  employerTAN: String,
  employerCategory: String,
  totalTax: String,
  grossSalary: {
    type: Number,
  },
  notifiedIncome: {
    type: Number,
  },
  salaryBreakup: [SalaryBreakupSchema],
  perquisitesAmount: { type: Number },
  perquisites: [{ description: String, amount: String }],
  profitAmount: { type: Number },
  profitsInLieu: [{ description: String, amount: String }],
  notifiedCountry: [{ description: String, amount: String }],
  notifiedIncomeOtherCountry: {
    type: Number,
  },
  previousYearIncomeTax: {
    type: Number,
  },
  exemptAllowance: { type: Number },
  exemptAllowancereakup: [SalaryBreakupSchema],
  balance: {
    type: Number,
  },
  standardDeduction: { type: Number },
  professionalTax: { type: Number },
  reliefUnder89: { type: Number },
  incomeClaimed: { type: Number },
  pincode: { type: Number },
  addressLine: { type: String },
  country: { type: String },
  state: { type: String },
  city: { type: String },
});

module.exports = mongoose.model("Form16DataManual", Form16DataSchema);
const mongoose = require("mongoose");

const FinanceSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  unsettledPayables: { type: Number, default: 0 },
  outstandingPrincipalSecured: { type: Number, default: 0 },
  outstandingPrincipalUnsecured: { type: Number, default: 0 },
  advances: { type: Number, default: 0 },
  amountsReceivedInAdvance: { type: Number, default: 0 },
  capitalInvestment: { type: Number, default: 0 },
  otherLiabilities: { type: Number, default: 0 },
  uncollectedReceivables: { type: Number, default: 0 },
  totalInventoryValue: { type: Number, default: 0 },
  fixedAssets: { type: Number, default: 0 },
  closingBalanceWithBanks: { type: Number, default: 0 },
  financeparticulars: { type: Number, default: 0 },
  otherAssets: { type: Number, default: 0 },
});

module.exports = mongoose.model("FinanceParticular", FinanceSchema);
const mongoose = require("mongoose");

const dividedSchema = new mongoose.Schema({
  narration: String,
  amount: Number,
  dateOfReceipt: String,
});

const DividendSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      required: true,
      ref: "User",
    },
    dividendIncome: [dividedSchema],
    totalAmount: {
      type: Number,
      default: 0,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("DividendIncome", DividendSchema);
const mongoose = require("mongoose");

const contactDetailSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    },
    aadharNumber: {
      type: String,
    },
    panNumber: {
      type: String,
    },
    mobileNumber: {
      type: String,
    },
    email: {
      type: String,
    },
    secondaryMobileNumber: {
      type: String,
    },
    secondaryEmail: {
      type: String,
    },
    landlineNumber: {
      type: String,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("ContactDetail", contactDetailSchema);

const mongoose = require("mongoose");

const BankDetailSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      required: true,
      ref: "User",
    },
    bankDetails: [
      {
        accountNo: { type: String },
        ifscCode: { type: String },
        bankName: { type: String },
        type: { type: String },
      },
    ],
  },
  { timestamps: true },

  { versionKey: false }
);

module.exports = mongoose.model("BankDetail", BankDetailSchema);

const mongoose = require("mongoose");

const addressSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    },
    flatNo: {
      type: String,
    },
    premiseName: {
      type: String,
    },
    road: {
      type: String,
    },
    area: {
      type: String,
    },
    pincode: {
      type: String,
    },
    country: {
      type: String,
    },
    state: {
      type: String,
    },
    city: {
      type: String,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Address", addressSchema);
const mongoose = require("mongoose");

const depLossSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
    unique: true,
  },
  losses: [
    {
      year: String,
      filingDate: String,
      category: String,
      amount: Number,
    },
  ],
  hasDepreciationLoss: Boolean,
  depreciationLosses: [
    {
      year: String,
      amount: Number,
    },
  ],
});

module.exports = mongoose.model("DeprectationLoss", depLossSchema);
const mongoose = require("mongoose");

const NonSalarySchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
    unique: true,
  },
  tan: String,
  name: String,
  totalTax: Number,
  transferTDS: Boolean,
  tdsCreditRelating: String,
  tdsCredit: Number,
  incomeRelatingTDS: Number,
  panOtherPerson: String,
  taxClaimed: Number,
  incomeAgainstTDS: Number,
  typeOfIncome: String,
  financialYear: String,
});

module.exports = mongoose.model("NonSalary", NonSalarySchema);


const mongoose = require("mongoose");

const selfTaxPaidSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },

  amount: { type: Number },
  date: { type: Date },
  bsrCode: { type: String },
  challanSerialNo: { type: String },
});

module.exports = mongoose.model("SelfTaxPaid", selfTaxPaidSchema);

const mongoose = require("mongoose");

const taxCollectedSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
    unique: true,
  },
  tan: String,
  name: String,
  totalTax: Number,
  transferTDS: Boolean,
  tdsCreditRelating: String,
  tdsCredit: Number,
  incomeRelatingTDS: Number,
  panOtherPerson: String,
  taxClaimed: Number,
  incomeAgainstTDS: Number,
  typeOfIncome: String,
  financialYear: String,
});

module.exports = mongoose.model("TaxCollected", taxCollectedSchema);

const mongoose = require("mongoose");

const TDSRentchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
    unique: true,
  },
  pan: String,
  name: String,
  totalTax: Number,
  transferTDS: Boolean,
  tdsCreditRelating: String,
  tdsCredit: Number,
  incomeRelatingTDS: Number,
  panOtherPerson: String,
  taxClaimed: Number,
  incomeAgainstTDS: Number,
  typeOfIncome: String,
  financialYear: String,
});

module.exports = mongoose.model("TDSRent", TDSRentchema);

const mongoose = require("mongoose");

const Donation80GSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  section80G: {
    type: String,
  },
  nameDonee: {
    type: String,
  },
  cashAmount: {
    type: Number,
  },
  nonCashAmount: {
    type: Number,
  },
  panDonee: {
    type: String,
  },
  limitDeduction: {
    type: String,
  },
  qualifyPercent: {
    type: Number,
  },
  addressLine: {
    type: String,
  },
  pinCode: {
    type: Number,
  },
  state: {
    type: String,
  },
  city: {
    type: String,
  },
});

module.exports = mongoose.model("Donation80G", Donation80GSchema);

const mongoose = require("mongoose");

const PoliticalContriSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  cashAmount: {
    type: Number,
  },
  nonCashAmount: {
    type: Number,
  },
  contriDate: {
    type: String,
  },
  tranNo: {
    type: String,
  },
  ifscCode: {
    type: String,
  },
});

module.exports = mongoose.model("PoliticalContri", PoliticalContriSchema);

const mongoose = require("mongoose");

const Donation80GGSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  section80G: {
    type: String,
  },
  nameDonee: {
    type: String,
  },
  cashAmount: {
    type: Number,
  },
  nonCashAmount: {
    type: Number,
  },
  panDonee: {
    type: String,
  },
  limitDeduction: {
    type: String,
  },
  qualifyPercent: {
    type: Number,
  },
  addressLine: {
    type: String,
  },
  pinCode: {
    type: Number,
  },
  state: {
    type: String,
  },
  city: {
    type: String,
  },
});

module.exports = mongoose.model("RuralDonation80GG", Donation80GGSchema);

const mongoose = require("mongoose");

const disabiltySchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  disabilityDetails: {
    disabilityNature: { type: String },
    dependentType: { type: String },
    panOfDependent: { type: String },
    aadhaarOfDependent: { type: String },
    form10IA: {
      filingDate: { type: String },
      ackNumber: { type: String },
      udidNumber: { type: String },
    },
  },
});

module.exports = mongoose.model("Disability", disabiltySchema);

const mongoose = require("mongoose");

const LoansSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  eduLoans: {
    type: Number,
  },
  homeLoans1617: {
    type: Number,
    max: 50000,
  },
  homeLoans1922: {
    type: Number,
    max: 50000,
  },
  electricVehicle: {
    type: Number,
  },
});

module.exports = mongoose.model("Loans", LoansSchema);

const mongoose = require("mongoose");

const Medical80DSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  selfAndFamily: {
    hasInsurance: { type: String },
    premium: { type: String },
    healthCheckup: { type: String },
    isSeniorCitizen: { type: Boolean },
    medicalExpenditure: { type: String },
  },
  parents: {
    hasInsurance: { type: String },
    premium: { type: String },
    healthCheckup: { type: String },
    isSeniorCitizen: { type: Boolean },
    medicalExpenditure: { type: String },
  },
  disabilityDetails: {
    disabilityNature: { type: String },
    dependentType: { type: String },
    panOfDependent: { type: String },
    aadhaarOfDependent: { type: String },
    form10IA: {
      filingDate: { type: String },
      ackNumber: { type: String },
      udidNumber: { type: String },
    },
  },
});

module.exports = mongoose.model("Medical80D", Medical80DSchema);

const mongoose = require("mongoose");

const SpecficDieaseDisabilitySchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  selfDisability: {
    hasDisability: {
      type: String,
    },
    disabilityType: {
      type: String,
    },
    form10IA: {
      fillingDate: {
        type: String,
      },
      ackNo: {
        type: String,
      },
      uuidNo: {
        type: String,
      },
    },
  },
  specificDisease: {
    age: {
      type: String,
    },
    costOfTreatment: {
      type: Number,
    },
  },
});

module.exports = mongoose.model(
  "SpecificDiseases",
  SpecficDieaseDisabilitySchema
);
const mongoose = require("mongoose");

const OtherDeductionSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  copyRightFee: {
    type: Number,
  },
  patentIncome: {
    type: Number,
  },
  bioWasteIncome: {
    type: Number,
  },
  agniPathContri: {
    type: Number,
  },
  rentPerMonth: {
    type: Number,
  },
  noOFMonth: {
    type: Number,
  },
});

module.exports = mongoose.model("OtherDeduction", OtherDeductionSchema);

const mongoose = require("mongoose");

const TaxInvestmentSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "User",
  },
  section80C: {
    type: Number,
    default: 0,
    max: 150000,
  },
  savingsInterest80TTA: {
    type: Number,
    default: 0,
  },
  pensionContribution80CCC: {
    type: Number,
    default: 0,
    max: 150000,
  },
  npsEmployeeContribution: {
    type: Number,
    default: 0,
  },
  npsEmployerContribution: {
    type: Number,
    default: 0,
  },
});

module.exports = mongoose.model("TaxInvestment", TaxInvestmentSchema);
const mongoose = require("mongoose");

const bondDebentureSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    },
    assetType: { type: String }, // e.g., "Stocks" or "Mutual Funds"
    assetSubType: { type: String }, // Listed Securities, Non Listed Securities, etc.
    dateOfSale: { type: Date },
    dateOfPurchase: { type: Date },
    description: { type: String },
    salePrice: { type: Number },
    transferExpenses: { type: Number },
    purchasePrice: { type: Number },
    totalProfit: { type: Number, default: 0 },
  },
  { timestamps: true }
);

bondDebentureSchema.pre("save", function (next) {
  // Ensure all required fields are present
  if (
    this.salePrice &&
    this.purchasePrice &&
    this.transferExpenses !== undefined
  ) {
    // Calculate totalProfit
    this.totalProfit =
      this.salePrice - this.transferExpenses - this.purchasePrice;
  }
  next();
});
module.exports = mongoose.model("BondDebenture", bondDebentureSchema);
