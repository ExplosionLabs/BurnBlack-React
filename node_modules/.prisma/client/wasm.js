
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  email: 'email',
  password: 'password',
  role: 'role',
  emailVerified: 'emailVerified',
  emailVerificationDate: 'emailVerificationDate',
  lastVerificationEmailSent: 'lastVerificationEmailSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersonalDetailScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  dob: 'dob',
  gender: 'gender',
  maritalStatus: 'maritalStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactDetailScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  phone: 'phone',
  panNumber: 'panNumber',
  aadharNumber: 'aadharNumber',
  alternativeEmail: 'alternativeEmail',
  alternativePhone: 'alternativePhone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressDetailScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  flatNo: 'flatNo',
  premiseName: 'premiseName',
  road: 'road',
  area: 'area',
  pincode: 'pincode',
  country: 'country',
  state: 'state',
  city: 'city',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankDetailScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountNumber: 'accountNumber',
  ifscCode: 'ifscCode',
  bankName: 'bankName',
  accountType: 'accountType',
  accountHolderName: 'accountHolderName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Form16DataScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employerName: 'employerName',
  employerTAN: 'employerTAN',
  employerCategory: 'employerCategory',
  totalTax: 'totalTax',
  grossSalary: 'grossSalary',
  notifiedIncome: 'notifiedIncome',
  salaryBreakup: 'salaryBreakup',
  perquisitesAmount: 'perquisitesAmount',
  perquisites: 'perquisites',
  profitAmount: 'profitAmount',
  profitsInLieu: 'profitsInLieu',
  notifiedCountry: 'notifiedCountry',
  notifiedIncomeOtherCountry: 'notifiedIncomeOtherCountry',
  previousYearIncomeTax: 'previousYearIncomeTax',
  exemptAllowance: 'exemptAllowance',
  exemptAllowanceBreakup: 'exemptAllowanceBreakup',
  balance: 'balance',
  standardDeduction: 'standardDeduction',
  professionalTax: 'professionalTax',
  reliefUnder89: 'reliefUnder89',
  incomeClaimed: 'incomeClaimed',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  propertyIndex: 'propertyIndex',
  propertyType: 'propertyType',
  netTaxableIncome: 'netTaxableIncome',
  houseAddress: 'houseAddress',
  ownerDetails: 'ownerDetails',
  taxSavings: 'taxSavings',
  rentalIncomeDetails: 'rentalIncomeDetails',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CapitalGainScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  assetType: 'assetType',
  assetSubType: 'assetSubType',
  dateOfSale: 'dateOfSale',
  dateOfPurchase: 'dateOfPurchase',
  description: 'description',
  salePrice: 'salePrice',
  transferExpenses: 'transferExpenses',
  purchasePrice: 'purchasePrice',
  sttPaid: 'sttPaid',
  totalProfit: 'totalProfit',
  indexationCost: 'indexationCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InterestIncomeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sourceType: 'sourceType',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  interestAmount: 'interestAmount',
  tdsDeducted: 'tdsDeducted',
  financialYear: 'financialYear',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DividendIncomeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  dividendAmount: 'dividendAmount',
  taxDeducted: 'taxDeducted',
  dateReceived: 'dateReceived',
  shareQuantity: 'shareQuantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessIncomeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessName: 'businessName',
  businessType: 'businessType',
  businessAddress: 'businessAddress',
  grossReceipts: 'grossReceipts',
  totalIncome: 'totalIncome',
  businessExpenses: 'businessExpenses',
  netProfit: 'netProfit',
  depreciationClaimed: 'depreciationClaimed',
  presumptiveIncome: 'presumptiveIncome',
  section44AD: 'section44AD',
  section44AE: 'section44AE',
  auditRequired: 'auditRequired',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalIncomeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  professionType: 'professionType',
  grossReceipts: 'grossReceipts',
  totalExpenses: 'totalExpenses',
  netProfit: 'netProfit',
  section44ADA: 'section44ADA',
  presumptiveIncome: 'presumptiveIncome',
  auditRequired: 'auditRequired',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfitLossScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessIncomeId: 'businessIncomeId',
  year: 'year',
  income: 'income',
  expenses: 'expenses',
  netProfit: 'netProfit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BalanceSheetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessIncomeId: 'businessIncomeId',
  year: 'year',
  assets: 'assets',
  liabilities: 'liabilities',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepreciationEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessIncomeId: 'businessIncomeId',
  assetName: 'assetName',
  assetCategory: 'assetCategory',
  purchaseDate: 'purchaseDate',
  purchaseCost: 'purchaseCost',
  depreciationRate: 'depreciationRate',
  accumulatedDepreciation: 'accumulatedDepreciation',
  writtenDownValue: 'writtenDownValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CryptoIncomeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  assetType: 'assetType',
  coinName: 'coinName',
  purchaseDate: 'purchaseDate',
  saleDate: 'saleDate',
  purchasePrice: 'purchasePrice',
  salePrice: 'salePrice',
  quantity: 'quantity',
  exchangeName: 'exchangeName',
  transactionHash: 'transactionHash',
  profit: 'profit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgriculturalIncomeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  landArea: 'landArea',
  location: 'location',
  cropType: 'cropType',
  annualIncome: 'annualIncome',
  expenses: 'expenses',
  netIncome: 'netIncome',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExemptIncomeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  incomeType: 'incomeType',
  description: 'description',
  amount: 'amount',
  section: 'section',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxSavingInvestmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  section80C: 'section80C',
  savingsInterest80TTA: 'savingsInterest80TTA',
  pensionContribution80CCC: 'pensionContribution80CCC',
  npsEmployeeContribution: 'npsEmployeeContribution',
  npsEmployerContribution: 'npsEmployerContribution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationName: 'organizationName',
  donationType: 'donationType',
  amount: 'amount',
  date: 'date',
  receiptNumber: 'receiptNumber',
  eligibleAmount: 'eligibleAmount',
  deductionPercentage: 'deductionPercentage',
  section: 'section',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalInsuranceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  policyType: 'policyType',
  insuredPersons: 'insuredPersons',
  premiumPaid: 'premiumPaid',
  eligibleAmount: 'eligibleAmount',
  policyNumber: 'policyNumber',
  insuranceCompany: 'insuranceCompany',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxPaidScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  taxType: 'taxType',
  amount: 'amount',
  date: 'date',
  challanNumber: 'challanNumber',
  bankName: 'bankName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletTransactionScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  transactionType: 'transactionType',
  amount: 'amount',
  description: 'description',
  razorpayPaymentId: 'razorpayPaymentId',
  razorpayOrderId: 'razorpayOrderId',
  status: 'status',
  timestamp: 'timestamp'
};

exports.Prisma.ITRGenerationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itrType: 'itrType',
  assessmentYear: 'assessmentYear',
  fileName: 'fileName',
  checksum: 'checksum',
  jsonData: 'jsonData',
  status: 'status',
  generatedAt: 'generatedAt',
  downloadedAt: 'downloadedAt'
};

exports.Prisma.TaxSummaryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  assessmentYear: 'assessmentYear',
  totalIncome: 'totalIncome',
  totalDeductions: 'totalDeductions',
  taxableIncome: 'taxableIncome',
  taxLiability: 'taxLiability',
  taxPaid: 'taxPaid',
  refundAmount: 'refundAmount',
  filingStatus: 'filingStatus',
  filingDate: 'filingDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.MaritalStatus = exports.$Enums.MaritalStatus = {
  SINGLE: 'SINGLE',
  MARRIED: 'MARRIED',
  DIVORCED: 'DIVORCED',
  WIDOWED: 'WIDOWED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.ITRType = exports.$Enums.ITRType = {
  ITR1: 'ITR1',
  ITR2: 'ITR2',
  ITR3: 'ITR3',
  ITR4: 'ITR4'
};

exports.ITRStatus = exports.$Enums.ITRStatus = {
  GENERATED: 'GENERATED',
  DOWNLOADED: 'DOWNLOADED',
  FILED: 'FILED',
  PROCESSED: 'PROCESSED'
};

exports.Prisma.ModelName = {
  User: 'User',
  PersonalDetail: 'PersonalDetail',
  ContactDetail: 'ContactDetail',
  AddressDetail: 'AddressDetail',
  BankDetail: 'BankDetail',
  Form16Data: 'Form16Data',
  Property: 'Property',
  CapitalGain: 'CapitalGain',
  InterestIncome: 'InterestIncome',
  DividendIncome: 'DividendIncome',
  BusinessIncome: 'BusinessIncome',
  ProfessionalIncome: 'ProfessionalIncome',
  ProfitLoss: 'ProfitLoss',
  BalanceSheet: 'BalanceSheet',
  DepreciationEntry: 'DepreciationEntry',
  CryptoIncome: 'CryptoIncome',
  AgriculturalIncome: 'AgriculturalIncome',
  ExemptIncome: 'ExemptIncome',
  TaxSavingInvestment: 'TaxSavingInvestment',
  Donation: 'Donation',
  MedicalInsurance: 'MedicalInsurance',
  TaxPaid: 'TaxPaid',
  Wallet: 'Wallet',
  WalletTransaction: 'WalletTransaction',
  ITRGeneration: 'ITRGeneration',
  TaxSummary: 'TaxSummary'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
